
/*
 * Copyright [2016] [Subhabrata Ghosh]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

VARIABLE_NATIVE_DEF:
${type} *${name} = nullptr;
;;

VARIABLE_LIST_DEF:
std::vector<${type} *> *${name} = nullptr;
;;

VARIABLE_MAP_DEF:
std::unordered_map<${key_type}, ${value_type} *> *${name} = nullptr;
;;

VARIABLE_INIT_PTR:
this->${name} = nullptr;
;;

VARIABLE_NATIVE_FREE:
FREE_PTR(this->${name});
;;

VARIABLE_TYPE_FREE:
CHECK_AND_FREE(this->${name});
;;

VARIABLE_LIST_NATIVE_FREE:
for(auto elem : this->${name}) {
    FREE_PTR(elem);
}
CHECK_AND_FREE(this->${name});
;;

VARIABLE_LIST_TYPE_FREE:
for(auto elem : this->${name}) {
    CHECK_AND_FREE(elem);
}
CHECK_AND_FREE(this->${name});
;;

VARIABLE_MAP_NATIVE_FREE:
for(auto kv = this->${name}->being(); kv != this->${name}->end(); kv++) {
    FREE_PTR(kv->second);
}
CHECK_AND_FREE(this->${name});
;;

VARIABLE_MAP_TYPE_FREE:
for(auto kv = this->${name}->being(); kv != this->${name}->end(); kv++) {
    CHECK_AND_FREE(kv->second);
}
CHECK_AND_FREE(this->${name});
;;

FUNC_GETTER_DEF:
${return} get_${name}(void) {
    return this->${name};
}
;;

FUNC_SETTER_PTR_DEF:
void set_${name}(${type} ${name}) {
    this->${name} = ${name};
}
;;

FUNC_NATIVE_SETTER_DEF:
void set_${name}(${type} ${name}) {
    PRECONDITION(${modevar} == true);
    FREE_PTR(this->${name});
    this->${name} = (${type} *)malloc(sizeof(${type});
    CHECK_ALLOC(this->${name}, TYPE_NAME(${type}));
    *(this->${name}) = ${name};
}
;;

FUNC_STRING_SETTER_DEF:
void set_${name}(string &${name}) {
    PRECONDITION(${modevar} == true);
    FREE_PTR(this->${name});
    if (!IS_EMPTY(${name}) {
        uint32_t __size = name.length() + 1;
        this->${name} = (char) malloc(sizeof(char) * __size);
        CHECK_ALLOC(this->${name}, TYPE_NAME(char *));
        memset(this->${name}, 0, __size);
        memcpy(this->${name}, ${name}.c_str(), (__size - 1));
    }
}
;;

FUNC_LIST_NATIVE_ADD_DEF:
void add_to_${name}(${type} &${name}) {
    PRECONDITION(${modevar} == true);
    if (IS_NULL(this->${name})) {
        this->${name} = new std::vector<${type} *>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(vector));
    }
    ${type} *__var = (${type} *)malloc(sizeof(${type}));
    CHECK_ALLOC(__var, TYPE_NAME(${type}));
    *__var = ${name};
    this->${name}->push_back(__var);
}
;;

FUNC_LIST_STRING_ADD_DEF:
void add_to_${name}(string &${name}) {
    PRECONDITION(${modevar} == true);
    if (IS_NULL(this->${name})) {
        this->${name} = new std::vector<${type} *>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(vector));
    }
    if (!IS_EMPTY(${name}) {
        uint32_t __size = name.length() + 1;
        char *__var = (char *)malloc(sizeof(char) * __size);
        CHECK_ALLOC(__var, TYPE_NAME(char *));
        memset(__var, 0, __size);
        memcpy(__var, ${name}.c_str(), (__size - 1));
        this->${name}->push_back(var);
    }
}
;;

FUNC_LIST_TYPE_ADD_DEF:
void add_to_${name}(${type} *${name}) {
    PRECONDITION(${modevar} == true);
    CHECK_NOT_NULL(${name});
    if (IS_NULL(this->${name})) {
        this->${name} = new std::vector<${type} *>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(vector));
    }
    his->${name}->push_back(${name});
}
;;

FUNC_MAP_NATIVE_ADD_DEF:
void add_to_${name}(${key_type} ${v_key}, ${value_type} &${v_value}) {
    PRECONDITION(${modevar} == true);
    if (IS_NULL(this->${name})) {
        this->${name} = new std::unordered_map<${key_type}, ${value_type} *>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(unordered_map));
    }
    ${value_type} *__var = (${value_type} *)malloc(sizeof(${value_type}));
    CHECK_ALLOC(__var, TYPE_NAME(${value_type}));
    *__var = ${value};
    this->${name}->insert(${key}, __var});
}
;;

FUNC_MAP_NATIVE_TYPE_DEF:
void add_to_${name}(${key_type} ${v_key}, ${value_type} *${v_value}) {
    PRECONDITION(${modevar} == true);
    if (IS_NULL(this->${name})) {
        this->${name} = new std::unordered_map<${key_type}, ${value_type} *>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(unordered_map));
    }
    his->${name}->insert(${key}, ${value}});
}
;;

FUNC_SETTER_FROM_MAP:
void set_value_${name}(__struct_datatype__ *__data) {
    if (NOT_NULL(__data)) {
        __struct_datatype__::const_iterator iter = __data->find("${name}");
        if (iter != __data->end()) {
            void *__ptr = iter->second;
            if (NOT_NULL(__ptr)) {
                if (this->is_native("${type}")) {
                    ${type} *__var = static_cast<${type} *>(__ptr);
                    CHECK_CAST(__var, TYPE_NAME(void *), TYPE_NAME(${type}));
                    this->${name} = __var;
                } else {
                    ${type} *__var = deserialze_${name}(__ptr);
                    CHECK_NOT_NULL(__var);
                    this->${name} = __var;
                }
            } else {
                this->${name} = nullptr;
            }
        } else {
            this->${name} = nullptr;
        }
    } else {
        this->${name} = nullptr;
    }
}
;;

FUNC_SETTER_TO_MAP:
void set_map_${name}(__struct_datatype__ *__data) {
    CHECK_NOT_NULL(__data);
    if (NOT_NULL(this->${name})) {
        if (this->is_native("${type}")) {
            __data->insert({"${name}", this->${name}});
        } else if (this->is_list("${type}") || this->is_map("${type}")) {
            void *__ptr = serialize_${type}(this->${name});
            CHECK_NOT_NULL(__ptr);
            __data->insert({"${name}", __ptr});
        } else {
            void *__ptr = serialize_${type}(this->${name});
            CHECK_NOT_NULL(__ptr);
            __data->insert({"${name}", __ptr});
        }
    }
}
;;

CALL_SETTER_FROM_MAP:
this->set_value_${name}(${data_var});
;;

CALL_SETTER_TO_MAP:
this->set_map_${name}(${data_var});

FUNC_SERIALIZE:
__struct_datatype__ *serialize() override {
    __struct_datatype__ *__map = new __struct_datatype__();
    CHECK_ALLOC(__map, TYPE_NAME(__struct_datatype__));
    ${set_map_calls}
    return __map;
}
;;

FUNC_DESERIALIZE:
void deserialize(__struct_datatype__ *__data) {
    CHECK_NOT_NULL(__data);
    ${read_map_calls};
}
;;

FUNC_TYPE_SERIALIZER:
void *serialize_${type}(${type} *__value) {
    CHECK_NOT_NULL(__value);
    __struct_datatype__ *__data = new __struct_datatype__();
    CHECK_ALLOC(__data, TYPE_NAME(__struct_datatype__));
    ${set_map_calls}
    return __data;
}
;;

FUNC_TYPE_LIST_SERIALIZER:
std::vector<__struct_datatype__ *> *serialize_${name}(std::vector<${type} *> *__value) {
    CHECK_NOT_EMPTY_P(__value);
    std::vector<__struct_datatype__ *> *__list = new std::vector<__struct_datatype__ *>();
    CHECK_ALLOC(__list, TYPE_NAME(vector));
    for (${type} *rec : *(__value)) {
        CHECK_NOT_NULL(rec);
        __struct_datatype__ *rv = this->serialize_${type}(rec);
        CHECK_NOT_NULL(rv);
        __list->push_back(rv);
    }
    return __list;
}
;;

FUNC_TYPE_MAP_SERIALIZER:
std::unordered_map<${key_type}, __struct_datatype__ *> *serialize_${name}(std::unordered_map<${key_type}, ${value_type *}> *__i_map) {
    CHECK_NOT_EMPTY_P(map);
    std::unordered_map<${key_type}, __struct_datatype__ *> *__map = new std::unordered_map<${key_type}, __struct_datatype__ *>();
    CHECK_ALLOC(__map, TYPE_NAME(unordered_map));

    std::unordered_map<${key_type}, ${value_type *}>::iterator iter;
    for(iter = __i_map->begin(); iter != __i_map.end(); iter++) {
        const ${key_type} key = iter->first;
        ${value_type} *value = iter->second;
        CHECK_NOT_NULL(value);
        __struct_datatype__ *rv = this->serialize_${value_type}(value);
        CHECK_NOT_NULL(rv);
        __i_map->insert({key, rv});
    }
    return __map;
}
;;

INCLUDE_BASE:
#include "types/includes/type_defs.h"
#include "types/includes/__base_type.h"

${includes}

using namespace REACTFS_NS_COMMON_PREFIX;
using namespace REACTFS_NS_CORE_PREFIX::types;

;;

NAMESPACE:
namespace ${name} {
    ${nested}
}
;;

CLASS_DEF:
class ${name} ${parent} {
private:
    ${declarations}

    ${private_functions}
public:
    ${constructor}

    ${destructor}

    ${public_functions}
};
;;

FILE_COMMENT:
/*!
 *  Auto-generated types for schema definition [source schema: ${schema_name}]
 *
 *  Reference Schema Version : ${version}
 *  Generated by : ${username}
 *  Generated on : ${date}
 */
;;

FILE_DEF:
${header}

#ifndef ${guard_name}
#define ${guard_name}
${includes}

${body}
#endif // ${guard_name}
;;
