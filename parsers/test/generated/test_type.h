/*!
 *  Auto-generated types for schema definition [source schema: test_schema]
 *
 *  Reference Schema Version : 0001.0000
 *  Generated by : subho
 *  Generated on : 2017-01-05 12:16:03.724
 */


#ifndef TEST_TYPE_H
#define TEST_TYPE_H
#include "types/includes/type_defs.h"
#include "types/includes/__base_type.h"



using namespace REACTFS_NS_COMMON_PREFIX;
using namespace REACTFS_NS_CORE_PREFIX::types;



namespace com {
	namespace wookler {
		namespace test {
			/**
			* Generated code for data record type test_type.
			*
			* Note:: Should not be modified as the changes will be lost when the code is re-generated.
			*/
			class test_type  : public com::wookler::reactfs::core::types::__base_type
			{
			private:
				char * testString = nullptr;

				double * testDouble = nullptr;

				float * testFloat = nullptr;

				vector<char *> * testListString = nullptr;

				unordered_map<double, char *> * testMapString = nullptr;



				/**
				* Value testString setter from the the serialized data map.
				*
				* @param __data - Serialized data map pointer.
				*/
				void read_value_testString ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 0 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testString
							const char * __var = static_cast<const char *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( char ) );
							this->testString = __var;

						} else {
							this->testString = nullptr;
						}
					} else {
						this->testString = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testString from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testString ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testString ) ) {
						// Add the value of testString to the data map.
						{
							const __native_type *ft = get_field_type ( "testString" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testString );

						}

					}
				}

				/**
				 * Value testDouble setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testDouble ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 1 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testDouble
							const double * __var = static_cast<const double *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( double ) );
							this->testDouble = __var;

						} else {
							this->testDouble = nullptr;
						}
					} else {
						this->testDouble = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testDouble from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testDouble ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testDouble ) ) {
						// Add the value of testDouble to the data map.
						{
							const __native_type *ft = get_field_type ( "testDouble" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testDouble );

						}

					}
				}

				/**
				 * Value testFloat setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testFloat ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 2 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testFloat
							const float * __var = static_cast<const float *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( float ) );
							this->testFloat = __var;

						} else {
							this->testFloat = nullptr;
						}
					} else {
						this->testFloat = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testFloat from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testFloat ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testFloat ) ) {
						// Add the value of testFloat to the data map.
						{
							const __native_type *ft = get_field_type ( "testFloat" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testFloat );

						}

					}
				}

				/**
				 * Value testListString setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testListString ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 3 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testListString
							const vector<char *> * __var = static_cast<const vector<char *> *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( vector ) );
							this->testListString = __var;

						} else {
							this->testListString = nullptr;
						}
					} else {
						this->testListString = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testListString from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testListString ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testListString ) ) {
						// Add the value of testListString to the data map.
						{
							const __native_type *ft = get_field_type ( "testListString" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testListString );

						}

					}
				}

				/**
				 * Value testMapString setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testMapString ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 4 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testMapString
							const unordered_map<double, char *> * __var = static_cast<const unordered_map<double, char *> *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( unordered_map ) );
							this->testMapString = __var;

						} else {
							this->testMapString = nullptr;
						}
					} else {
						this->testMapString = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testMapString from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testMapString ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testMapString ) ) {
						// Add the value of testMapString to the data map.
						{
							const __native_type *ft = get_field_type ( "testMapString" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testMapString );

						}

					}
				}


			public:
				/**
				* Set the pointer to testString.
				*
				* @param testString - Pointer of type char *.
				*/
				void set_testString ( char * testString )
				{
					this->testString = testString;
				}

				/**
				 * Get the pointer to the property testString of type char *.
				 * Returns a const pointer.
				 *
				 * @return char *
				 */
				const char * get_testString ( void ) const
				{
					return this->testString;
				}

				/**
				 * Set the char buffer value from the specified string.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @param testString - String value to set.
				 */
				void set_testString ( string &testString )
				{
					FREE_PTR ( this->testString );
					if ( !IS_EMPTY ( testString ) ) {
						uint32_t __size = testString.length() + 1;
						this->testString = ( char * ) malloc ( sizeof ( char ) * __size );
						CHECK_ALLOC ( this->testString, TYPE_NAME ( char * ) );
						memset ( this->testString, 0, __size );
						memcpy ( this->testString, testString.c_str(), ( __size - 1 ) );
					}
				}

				/**
				 * Set the pointer to testDouble.
				 *
				 * @param testDouble - Pointer of type double *.
				 */
				void set_testDouble ( double * testDouble )
				{
					this->testDouble = testDouble;
				}

				/**
				 * Get the pointer to the property testDouble of type double *.
				 * Returns a const pointer.
				 *
				 * @return double *
				 */
				const double * get_testDouble ( void ) const
				{
					return this->testDouble;
				}

				/**
				 * Set the value to testDouble.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @Param testDouble - Value reference.
				 */
				void set_testDouble ( double &testDouble )
				{
					PRECONDITION ( this->__is_allocated == true );
					if ( IS_NULL ( this->testDouble ) ) {
						this->testDouble = ( double * ) malloc ( sizeof ( double ) );
						CHECK_ALLOC ( this->testDouble, TYPE_NAME ( double ) );
					}
					* ( this->testDouble ) = testDouble;
				}

				/**
				 * Set the pointer to testFloat.
				 *
				 * @param testFloat - Pointer of type float *.
				 */
				void set_testFloat ( float * testFloat )
				{
					this->testFloat = testFloat;
				}

				/**
				 * Get the pointer to the property testFloat of type float *.
				 * Returns a const pointer.
				 *
				 * @return float *
				 */
				const float * get_testFloat ( void ) const
				{
					return this->testFloat;
				}

				/**
				 * Set the value to testFloat.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @Param testFloat - Value reference.
				 */
				void set_testFloat ( float &testFloat )
				{
					PRECONDITION ( this->__is_allocated == true );
					if ( IS_NULL ( this->testFloat ) ) {
						this->testFloat = ( float * ) malloc ( sizeof ( float ) );
						CHECK_ALLOC ( this->testFloat, TYPE_NAME ( float ) );
					}
					* ( this->testFloat ) = testFloat;
				}

				/**
				 * Get the pointer to the property testListString of type vector<char *> *.
				 * Returns a const pointer.
				 *
				 * @return vector<char *> *
				 */
				const vector<char *> * get_testListString ( void ) const
				{
					return this->testListString;
				}

				/**
				 * Set the pointer to testListString.
				 *
				 * @param testListString - Pointer of type vector<char *> *.
				 */
				void set_testListString ( vector<char *> * testListString )
				{
					this->testListString = testListString;
				}

				/**
				 * Add a string element to the list testListString.
				 * Elements are expected to be pre-assigned data
				 * value.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @param testListString - String value to add to list.
				 */
				void add_to_testListString ( string &testListString )
				{
					PRECONDITION ( this->__is_allocated == true );
					if ( IS_NULL ( this->testListString ) ) {
						this->testListString = new std::vector<char *>();
						CHECK_ALLOC ( this->testListString, TYPE_NAME ( vector ) );
					}
					if ( !IS_EMPTY ( testListString ) ) {
						uint32_t __size = testListString.length() + 1;
						char *__var = ( char * ) malloc ( sizeof ( char ) * __size );
						CHECK_ALLOC ( __var, TYPE_NAME ( char * ) );
						memset ( __var, 0, __size );
						memcpy ( __var, testListString.c_str(), ( __size - 1 ) );
						this->testListString->push_back ( __var );
					}
				}

				/**
				 * Get the pointer to the property testMapString of type unordered_map<double, char *> *.
				 * Returns a const pointer.
				 *
				 * @return unordered_map<double, char *> *
				 */
				const unordered_map<double, char *> * get_testMapString ( void ) const
				{
					return this->testMapString;
				}

				/**
				 * Set the pointer to testMapString.
				 *
				 * @param testMapString - Pointer of type unordered_map<double, char *> *.
				 */
				void set_testMapString ( unordered_map<double, char *> * testMapString )
				{
					this->testMapString = testMapString;
				}

				/**
				 * Add a map record of key/value type double/char *.
				 *
				 * @param m_key - Map key of type double
				 * @param m_value - String value of the map record value.
				 */
				void add_to_testMapString ( double m_key, string &m_value )
				{
					PRECONDITION ( this->__is_allocated == true );
					if ( IS_NULL ( this->testMapString ) ) {
						this->testMapString = new std::unordered_map<double, char *>();
						CHECK_ALLOC ( this->testMapString, TYPE_NAME ( unordered_map ) );
					}
					CHECK_NOT_EMPTY ( m_value );
					uint32_t __size = ( m_value.length() + 1 ) * sizeof ( char );
					char *__var = ( char * ) malloc ( sizeof ( char ) * __size );
					CHECK_ALLOC ( __var, TYPE_NAME ( char * ) );
					memset ( __var, 0, __size );
					memcpy ( __var, m_value.c_str(), ( __size - 1 ) );
					this->testMapString->insert ( {m_key, __var} );
				}

				/**
				 * Empty constructor when creating an instance of test_type for setting data locally.
				 * Should be used to create a new record instance of type test_type.
				 *
				 * @param record_type - Parsed schema definition of this type.
				 */
				test_type ( const __complex_type *record_type )
				{
					CHECK_NOT_NULL ( record_type );
					this->record_type = record_type;
					this->__is_allocated = true;
					this->testString = nullptr;
					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

				}

				/**
				 * Create a new read-only instance of test_type and populate the data from the passed
				 * serialized data map.
				 *
				 * @param __data - Serialized data map to load the object data from.
				 */
				test_type ( record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					this->testString = nullptr;
					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

					this->deserialize ( __data );
				}

				/**
				 * Copy constructor to create a copy instance of test_type.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of test_type to copy from.
				 */
				test_type ( const test_type &source )
				{
					this->__is_allocated = true;
					this->record_type = source.get_record_type();
					CHECK_NOT_NULL ( this->record_type );

					this->testString = nullptr;
					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

					// Set testString from the source value.
					if ( NOT_NULL ( source.testString ) ) {
						string __testString = string ( source.testString );
						this->set_testString ( __testString );
					}

// Set testDouble from the source value.
					if ( NOT_NULL ( source.testDouble ) ) {
						this->set_testDouble ( * ( source.testDouble ) );
					}

// Set testFloat from the source value.
					if ( NOT_NULL ( source.testFloat ) ) {
						this->set_testFloat ( * ( source.testFloat ) );
					}

// Deserialize the list testListString from the source value.
					if ( NOT_EMPTY_P ( source.testListString ) ) {
						std::vector<char *> *__list = new std::vector<char *>();
						CHECK_ALLOC ( __list, TYPE_NAME ( vector ) );
						for ( char * v : * ( source.testListString ) ) {
							CHECK_NOT_NULL ( v );
							char * __tv = ( char * ) malloc ( sizeof ( char ) );
							CHECK_ALLOC ( __tv, TYPE_NAME ( char ) );
							*__tv = *v;
							__list->push_back ( __tv );
						}
						this->testListString = __list;
					}

// Deserialize the map testMapString from the source value.
					if ( NOT_EMPTY_P ( source.testMapString ) ) {
						std::unordered_map<double, char *> *__map = new std::unordered_map<double, char *>();
						CHECK_ALLOC ( __map, TYPE_NAME ( unordered_map ) );

						std::unordered_map<double, char * >::iterator iter;
						for ( iter = source.testMapString->begin(); iter != source.testMapString->end(); iter++ ) {
							CHECK_NOT_NULL ( iter->second );
							char * __tv = ( char * ) malloc ( sizeof ( char ) );
							CHECK_ALLOC ( __tv, TYPE_NAME ( char ) );
							*__tv = * ( iter->second );
							__map->insert ( {iter->first, __tv} );
						}
						this->testMapString = __map;
					}


				}

				/**
				 * Copy constructor to create a copy instance of test_type.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of test_type to copy from.
				 */
				test_type ( const test_type *source )
				{
					this->__is_allocated = true;
					this->record_type = source->get_record_type();
					CHECK_NOT_NULL ( this->record_type );

					this->testString = nullptr;
					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

					// Set testString from the source value.
					if ( NOT_NULL ( source->testString ) ) {
						string __testString = string ( source->testString );
						this->set_testString ( __testString );
					}

// Set testDouble from the source value.
					if ( NOT_NULL ( source->testDouble ) ) {
						this->set_testDouble ( * ( source->testDouble ) );
					}

// Set testFloat from the source value.
					if ( NOT_NULL ( source->testFloat ) ) {
						this->set_testFloat ( * ( source->testFloat ) );
					}

// Deserialize the list testListString from the source value.
					if ( NOT_EMPTY_P ( source->testListString ) ) {
						std::vector<char *> *__list = new std::vector<char *>();
						CHECK_ALLOC ( __list, TYPE_NAME ( vector ) );
						for ( char * v : * ( source->testListString ) ) {
							CHECK_NOT_NULL ( v );
							char * __tv = ( char * ) malloc ( sizeof ( char ) );
							CHECK_ALLOC ( __tv, TYPE_NAME ( char ) );
							*__tv = *v;
							__list->push_back ( __tv );
						}
						this->testListString = __list;
					}

// Deserialize the map testMapString from the source value.
					if ( NOT_EMPTY_P ( source->testMapString ) ) {
						std::unordered_map<double, char *> *__map = new std::unordered_map<double, char *>();
						CHECK_ALLOC ( __map, TYPE_NAME ( unordered_map ) );

						std::unordered_map<double, char * >::iterator iter;
						for ( iter = source->testMapString->begin(); iter != source->testMapString->end(); iter++ ) {
							CHECK_NOT_NULL ( iter->second );
							char * __tv = ( char * ) malloc ( sizeof ( char ) );
							CHECK_ALLOC ( __tv, TYPE_NAME ( char ) );
							*__tv = * ( iter->second );
							__map->insert ( {iter->first, __tv} );
						}
						this->testMapString = __map;
					}


				}

				/**
				 * Descructor for test_type
				 */
				~test_type()
				{
					if ( this->__is_allocated ) {
						FREE_PTR ( this->testString );
					}

					if ( this->__is_allocated ) {
						FREE_PTR ( this->testDouble );
					}

					if ( this->__is_allocated ) {
						FREE_PTR ( this->testFloat );
					}

					if ( this->__is_allocated ) {
						FREE_NATIVE_LIST ( this->testListString );
					} else {
						this->testListString->clear();
						CHECK_AND_FREE ( this->testListString );
					}

					if ( this->__is_allocated ) {
						FREE_NATIVE_MAP ( this->testMapString );
					} else {
						this->testMapString->clear();
						CHECK_AND_FREE ( this->testMapString );
					}


					__base_type::free_data_ptr();
				}

				/**
				 * Deserialize this type instance from the passed data map.
				 *
				 * @param __data - Serialized data record instance to load this type from.
				 */
				void deserialize ( const record_struct *__data ) override
				{
					CHECK_NOT_NULL ( __data );

					this->record_type = __data->get_record_type();
					CHECK_NOT_NULL ( this->record_type );
					this->__is_allocated = false;

					// Set the value of testString from the serialized data map.
					this->read_value_testString ( __data );

					// Set the value of testDouble from the serialized data map.
					this->read_value_testDouble ( __data );

					// Set the value of testFloat from the serialized data map.
					this->read_value_testFloat ( __data );

					// Set the value of testListString from the serialized data map.
					this->read_value_testListString ( __data );

					// Set the value of testMapString from the serialized data map.
					this->read_value_testMapString ( __data );



					this->__data = __data;
				}

				/**
				 * Serialize this type instance into a data map instance.
				 *
				 * @return - Serialized data record instance.
				 */
				mutable_record_struct *serialize() override
				{
					mutable_record_struct *__data = new mutable_record_struct ( this->record_type );
					CHECK_ALLOC ( __data, TYPE_NAME ( mutable_record_struct ) );
					// Call the method to add the value of testString to the serialized data map.
					this->set_serde_testString ( __data );

// Call the method to add the value of testDouble to the serialized data map.
					this->set_serde_testDouble ( __data );

// Call the method to add the value of testFloat to the serialized data map.
					this->set_serde_testFloat ( __data );

// Call the method to add the value of testListString to the serialized data map.
					this->set_serde_testListString ( __data );

// Call the method to add the value of testMapString to the serialized data map.
					this->set_serde_testMapString ( __data );


					return __data;
				}


			};

		}

	}

}

#endif // TEST_TYPE_H

