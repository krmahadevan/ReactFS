/*!
 *  Auto-generated types for schema definition [source schema: test_schema]
 *
 *  Reference Schema Version : 0001.0000
 *  Generated by : subho
 *  Generated on : 2017-01-05 12:16:03.760
 */


#ifndef TEST_SCHEMA_H
#define TEST_SCHEMA_H
#include "types/includes/type_defs.h"
#include "types/includes/__base_type.h"

#include "test_type.h"
#include "test_ref_type.h"


using namespace REACTFS_NS_COMMON_PREFIX;
using namespace REACTFS_NS_CORE_PREFIX::types;



namespace com {
	namespace wookler {
		namespace test {
			/**
			* Generated code for data record type test_schema.
			*
			* Note:: Should not be modified as the changes will be lost when the code is re-generated.
			*/
			class test_schema  : public com::wookler::reactfs::core::types::__base_type
			{
			private:
				char * key = nullptr;

				long * testLong = nullptr;

				short * shortWithDefault = nullptr;

				test_ref_type * testTypeRef = nullptr;

				vector<test_type *> * testListRef = nullptr;



				/**
				* Value key setter from the the serialized data map.
				*
				* @param __data - Serialized data map pointer.
				*/
				void read_value_key ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 0 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of key
							const char * __var = static_cast<const char *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( char ) );
							this->key = __var;

						} else {
							this->key = nullptr;
						}
					} else {
						this->key = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of key from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_key ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->key ) ) {
						// Add the value of key to the data map.
						{
							const __native_type *ft = get_field_type ( "key" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->key );

						}

					}
				}

				/**
				 * Value testLong setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testLong ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 1 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testLong
							const long * __var = static_cast<const long *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( long ) );
							this->testLong = __var;

						} else {
							this->testLong = nullptr;
						}
					} else {
						this->testLong = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testLong from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testLong ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testLong ) ) {
						// Add the value of testLong to the data map.
						{
							const __native_type *ft = get_field_type ( "testLong" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testLong );

						}

					}
				}

				/**
				 * Value shortWithDefault setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_shortWithDefault ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 2 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of shortWithDefault
							const short * __var = static_cast<const short *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( short ) );
							this->shortWithDefault = __var;

						} else {
							this->shortWithDefault = nullptr;
						}
					} else {
						this->shortWithDefault = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of shortWithDefault from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_shortWithDefault ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->shortWithDefault ) ) {
						// Add the value of shortWithDefault to the data map.
						{
							const __native_type *ft = get_field_type ( "shortWithDefault" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->shortWithDefault );

						}

					}
				}

				/**
				 * Serialize the type value for test_ref_type and add to the data map.
				 *
				 * @param __value - Pointer to the field of type test_ref_type.
				 * @return - Serialized data map instance.
				 */
				mutable_record_struct *serialize_test_ref_type ( test_ref_type * __value )
				{
					CHECK_NOT_NULL ( __value );
					mutable_record_struct *__data = __value->serialize();
					CHECK_NOT_NULL ( __data );
					return __data;
				}

				/**
				 * Deserialize an instance of type test_ref_type from the
				 * passed input data.
				 *
				 * @param __input - Void pointer to input data of type __struct_datatype__
				 * @return - Deserialized instance pointer of type test_ref_type *
				 */
				test_ref_type * deserialize_test_ref_type ( const void *__input )
				{
					CHECK_NOT_NULL ( __input );
					const record_struct *__value = static_cast<const record_struct *> ( __input );
					CHECK_CAST ( __value, TYPE_NAME ( void * ), TYPE_NAME ( record_struct ) );
					test_ref_type * __data = new test_ref_type ( __value );
					CHECK_ALLOC ( __data, TYPE_NAME ( test_ref_type ) );
					return __data;
				}

				/**
				 * Value testTypeRef setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testTypeRef ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( $ {field_index} );
						if ( NOT_NULL ( __ptr ) ) {
							// Deserialize and set the value of testTypeRef
							test_ref_type * __var = deserialize_test_ref_type ( __ptr );
							CHECK_NOT_NULL ( __var );
							this->testTypeRef = __var;

						} else {
							this->testTypeRef = nullptr;
						}
					} else {
						this->testTypeRef = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testTypeRef from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testTypeRef ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testTypeRef ) ) {
						// Serialize the value of testTypeRef and add to the data map.
						{
							void *__ptr = serialize_test_ref_type ( this->testTypeRef );
							CHECK_NOT_NULL ( __ptr );

							const __native_type *ft = get_field_type ( "testTypeRef" );
							CHECK_NOT_NULL ( ft );

							__data->add_field ( ft->get_index(), ptr );
						}

					}
				}

				/**
				 * Serialize the type value for test_type and add to the data map.
				 *
				 * @param __value - Pointer to the field of type test_type.
				 * @return - Serialized data map instance.
				 */
				mutable_record_struct *serialize_test_type ( test_type * __value )
				{
					CHECK_NOT_NULL ( __value );
					mutable_record_struct *__data = __value->serialize();
					CHECK_NOT_NULL ( __data );
					return __data;
				}

				/**
				 * Deserialize an instance of type test_type from the
				 * passed input data.
				 *
				 * @param __input - Void pointer to input data of type __struct_datatype__
				 * @return - Deserialized instance pointer of type test_type *
				 */
				test_type * deserialize_test_type ( const void *__input )
				{
					CHECK_NOT_NULL ( __input );
					const record_struct *__value = static_cast<const record_struct *> ( __input );
					CHECK_CAST ( __value, TYPE_NAME ( void * ), TYPE_NAME ( record_struct ) );
					test_type * __data = new test_type ( __value );
					CHECK_ALLOC ( __data, TYPE_NAME ( test_type ) );
					return __data;
				}

				/**
				 * Serialize the list instance of value type test_type *.
				 *
				 * @param __value - Vector instance of test_type *.
				 * @return - Vector of serialized data maps.
				 */
				std::vector<mutable_record_struct *> *serialize_list_vector_test_type___ ( std::vector<test_type *> *__value )
				{
					CHECK_NOT_EMPTY_P ( __value );
					std::vector<mutable_record_struct *> *__list = new std::vector<mutable_record_struct *>();
					CHECK_ALLOC ( __list, TYPE_NAME ( vector ) );
					for ( test_type * rec : * ( __value ) ) {
						CHECK_NOT_NULL ( rec );
						mutable_record_struct *rv = this->serialize_test_type ( rec );
						CHECK_NOT_NULL ( rv );
						__list->push_back ( rv );
					}
					return __list;
				}

				/**
				 * Deserialize a list instance of type test_type * from the passed input data.
				 *
				 * @param __input - Void pointer to input data of type vector<__struct_datatype__ *>
				 * @return - Deserialized pointer to list of type vector<test_type * *>
				 */
				std::vector<test_type *> *deserialize_list_vector_test_type___ ( const void *__input )
				{
					CHECK_NOT_NULL ( __input );
					const std::vector<record_struct *> *__value = static_cast<const std::vector<record_struct *> *> ( __input );
					CHECK_CAST ( __value, TYPE_NAME ( void * ), TYPE_NAME ( vector ) );

					std::vector<test_type *> *__list = new std::vector<test_type *>();
					CHECK_ALLOC ( __list, TYPE_NAME ( vector ) );
					for ( record_struct *v : *__value ) {
						CHECK_NOT_NULL ( v );
						test_type * __tv = deserialize_test_type ( v );
						CHECK_NOT_NULL ( __tv );
						__list->push_back ( __tv );
					}
					return __list;
				}

				/**
				 * Value testListRef setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testListRef ( record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( $ {field_index} );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of list testListRef
							std::vector<test_type *> *__var = deserialize_list_vector_test_type___ ( __ptr );
							CHECK_NOT_NULL ( __var );
							this->testListRef = __var;

						} else {
							this->testListRef = nullptr;
						}
					} else {
						this->testListRef = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testListRef from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testListRef ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testListRef ) ) {
						// Serialize the list testListRef and add to the data map.
						{
							void *__ptr = serialize_list_vector_test_type___ ( this->testListRef );
							CHECK_NOT_NULL ( __ptr );

							const __native_type *ft = get_field_type ( "testListRef" );
							CHECK_NOT_NULL ( ft );

							__data->add_field ( ft->get_index(), ptr );
						}

					}
				}


			public:
				/**
				* Set the pointer to key.
				*
				* @param key - Pointer of type char *.
				*/
				void set_key ( char * key )
				{
					this->key = key;
				}

				/**
				 * Get the pointer to the property key of type char *.
				 * Returns a const pointer.
				 *
				 * @return char *
				 */
				const char * get_key ( void ) const
				{
					return this->key;
				}

				/**
				 * Set the char buffer value from the specified string.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @param key - String value to set.
				 */
				void set_key ( string &key )
				{
					FREE_PTR ( this->key );
					if ( !IS_EMPTY ( key ) ) {
						uint32_t __size = key.length() + 1;
						this->key = ( char * ) malloc ( sizeof ( char ) * __size );
						CHECK_ALLOC ( this->key, TYPE_NAME ( char * ) );
						memset ( this->key, 0, __size );
						memcpy ( this->key, key.c_str(), ( __size - 1 ) );
					}
				}

				/**
				 * Set the pointer to testLong.
				 *
				 * @param testLong - Pointer of type long *.
				 */
				void set_testLong ( long * testLong )
				{
					this->testLong = testLong;
				}

				/**
				 * Get the pointer to the property testLong of type long *.
				 * Returns a const pointer.
				 *
				 * @return long *
				 */
				const long * get_testLong ( void ) const
				{
					return this->testLong;
				}

				/**
				 * Set the value to testLong.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @Param testLong - Value reference.
				 */
				void set_testLong ( long &testLong )
				{
					PRECONDITION ( this->__is_allocated == true );
					if ( IS_NULL ( this->testLong ) ) {
						this->testLong = ( long * ) malloc ( sizeof ( long ) );
						CHECK_ALLOC ( this->testLong, TYPE_NAME ( long ) );
					}
					* ( this->testLong ) = testLong;
				}

				/**
				 * Set the pointer to shortWithDefault.
				 *
				 * @param shortWithDefault - Pointer of type short *.
				 */
				void set_shortWithDefault ( short * shortWithDefault )
				{
					this->shortWithDefault = shortWithDefault;
				}

				/**
				 * Get the pointer to the property shortWithDefault of type short *.
				 * Returns a const pointer.
				 *
				 * @return short *
				 */
				const short * get_shortWithDefault ( void ) const
				{
					return this->shortWithDefault;
				}

				/**
				 * Set the value to shortWithDefault.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @Param shortWithDefault - Value reference.
				 */
				void set_shortWithDefault ( short &shortWithDefault )
				{
					PRECONDITION ( this->__is_allocated == true );
					if ( IS_NULL ( this->shortWithDefault ) ) {
						this->shortWithDefault = ( short * ) malloc ( sizeof ( short ) );
						CHECK_ALLOC ( this->shortWithDefault, TYPE_NAME ( short ) );
					}
					* ( this->shortWithDefault ) = shortWithDefault;
				}

				/**
				 * Get the pointer to the property testTypeRef of type test_ref_type *.
				 * Returns a const pointer.
				 *
				 * @return test_ref_type *
				 */
				const test_ref_type * get_testTypeRef ( void ) const
				{
					return this->testTypeRef;
				}

				/**
				 * Set the pointer to testTypeRef.
				 *
				 * @param testTypeRef - Pointer of type test_ref_type *.
				 */
				void set_testTypeRef ( test_ref_type * testTypeRef )
				{
					this->testTypeRef = testTypeRef;
				}

				/**
				 * Get the pointer to the property testListRef of type vector<test_type *> *.
				 * Returns a const pointer.
				 *
				 * @return vector<test_type *> *
				 */
				const vector<test_type *> * get_testListRef ( void ) const
				{
					return this->testListRef;
				}

				/**
				 * Set the pointer to testListRef.
				 *
				 * @param testListRef - Pointer of type vector<test_type *> *.
				 */
				void set_testListRef ( vector<test_type *> * testListRef )
				{
					this->testListRef = testListRef;
				}

				/**
				 * Add a type element to the list testListRef.
				 * Elements are expected to be pre-allocated type
				 * pointer.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @param testListRef - String value to add to list.
				 */
				void add_to_testListRef ( test_type * testListRef )
				{
					PRECONDITION ( this->__is_allocated == true );
					CHECK_NOT_NULL ( testListRef );
					if ( IS_NULL ( this->testListRef ) ) {
						this->testListRef = new std::vector<test_type *>();
						CHECK_ALLOC ( this->testListRef, TYPE_NAME ( vector ) );
					}
					this->testListRef->push_back ( testListRef );
				}

				/**
				 * Empty constructor when creating an instance of test_schema for setting data locally.
				 * Should be used to create a new record instance of type test_schema.
				 *
				 * @param record_type - Parsed schema definition of this type.
				 */
				test_schema ( const __complex_type *record_type )
				{
					CHECK_NOT_NULL ( record_type );
					this->record_type = record_type;
					this->__is_allocated = true;
					this->key = nullptr;
					this->testLong = nullptr;
					this->shortWithDefault = nullptr;
					this->testTypeRef = nullptr;
					this->testListRef = nullptr;

				}

				/**
				 * Create a new read-only instance of test_schema and populate the data from the passed
				 * serialized data map.
				 *
				 * @param __data - Serialized data map to load the object data from.
				 */
				test_schema ( record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					this->key = nullptr;
					this->testLong = nullptr;
					this->shortWithDefault = nullptr;
					this->testTypeRef = nullptr;
					this->testListRef = nullptr;

					this->deserialize ( __data );
				}

				/**
				 * Copy constructor to create a copy instance of test_schema.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of test_schema to copy from.
				 */
				test_schema ( const test_schema &source )
				{
					this->__is_allocated = true;
					this->record_type = source.get_record_type();
					CHECK_NOT_NULL ( this->record_type );

					this->key = nullptr;
					this->testLong = nullptr;
					this->shortWithDefault = nullptr;
					this->testTypeRef = nullptr;
					this->testListRef = nullptr;

					// Set key from the source value.
					if ( NOT_NULL ( source.key ) ) {
						string __key = string ( source.key );
						this->set_key ( __key );
					}

// Set testLong from the source value.
					if ( NOT_NULL ( source.testLong ) ) {
						this->set_testLong ( * ( source.testLong ) );
					}

// Set shortWithDefault from the source value.
					if ( NOT_NULL ( source.shortWithDefault ) ) {
						this->set_shortWithDefault ( * ( source.shortWithDefault ) );
					}

// Set testTypeRef from the source value.
					if ( NOT_NULL ( source.testTypeRef ) ) {
						this->testTypeRef = new test_ref_type ( * ( source.testTypeRef ) );
						CHECK_ALLOC ( this->testTypeRef, TYPE_NAME ( test_ref_type ) );
					}

// Deserialize the list testListRef from the source value.
					if ( NOT_EMPTY_P ( source.testListRef ) ) {
						std::vector<test_type *> *__list = new std::vector<test_type *>();
						CHECK_ALLOC ( __list, TYPE_NAME ( vector ) );
						for ( test_type * v : * ( source.testListRef ) ) {
							CHECK_NOT_NULL ( v );
							test_type * __tv = new test_type ( v );
							CHECK_NOT_NULL ( __tv );
							__list->push_back ( __tv );
						}
						this->testListRef = __list;
					}


				}

				/**
				 * Copy constructor to create a copy instance of test_schema.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of test_schema to copy from.
				 */
				test_schema ( const test_schema *source )
				{
					this->__is_allocated = true;
					this->record_type = source->get_record_type();
					CHECK_NOT_NULL ( this->record_type );

					this->key = nullptr;
					this->testLong = nullptr;
					this->shortWithDefault = nullptr;
					this->testTypeRef = nullptr;
					this->testListRef = nullptr;

					// Set key from the source value.
					if ( NOT_NULL ( source->key ) ) {
						string __key = string ( source->key );
						this->set_key ( __key );
					}

// Set testLong from the source value.
					if ( NOT_NULL ( source->testLong ) ) {
						this->set_testLong ( * ( source->testLong ) );
					}

// Set shortWithDefault from the source value.
					if ( NOT_NULL ( source->shortWithDefault ) ) {
						this->set_shortWithDefault ( * ( source->shortWithDefault ) );
					}

// Set testTypeRef from the source value.
					if ( NOT_NULL ( source->testTypeRef ) ) {
						this->testTypeRef = new test_ref_type ( source->testTypeRef );
						CHECK_ALLOC ( this->testTypeRef, TYPE_NAME ( test_ref_type ) );
					}

// Deserialize the list testListRef from the source value.
					if ( NOT_EMPTY_P ( source->testListRef ) ) {
						std::vector<test_type *> *__list = new std::vector<test_type *>();
						CHECK_ALLOC ( __list, TYPE_NAME ( vector ) );
						for ( test_type * v : * ( source->testListRef ) ) {
							CHECK_NOT_NULL ( v );
							test_type * __tv = new test_type ( v );
							CHECK_NOT_NULL ( __tv );
							__list->push_back ( __tv );
						}
						this->testListRef = __list;
					}


				}

				/**
				 * Descructor for test_schema
				 */
				~test_schema()
				{
					if ( this->__is_allocated ) {
						FREE_PTR ( this->key );
					}

					if ( this->__is_allocated ) {
						FREE_PTR ( this->testLong );
					}

					if ( this->__is_allocated ) {
						FREE_PTR ( this->shortWithDefault );
					}

					CHECK_AND_FREE ( this->testTypeRef );

					FREE_TYPE_LIST ( this->testListRef );


					__base_type::free_data_ptr();
				}

				/**
				 * Deserialize this type instance from the passed data map.
				 *
				 * @param __data - Serialized data record instance to load this type from.
				 */
				void deserialize ( const record_struct *__data ) override
				{
					CHECK_NOT_NULL ( __data );

					this->record_type = __data->get_record_type();
					CHECK_NOT_NULL ( this->record_type );
					this->__is_allocated = false;

					// Set the value of key from the serialized data map.
					this->read_value_key ( __data );

					// Set the value of testLong from the serialized data map.
					this->read_value_testLong ( __data );

					// Set the value of shortWithDefault from the serialized data map.
					this->read_value_shortWithDefault ( __data );

					// Set the value of testTypeRef from the serialized data map.
					this->read_value_testTypeRef ( __data );

					// Set the value of testListRef from the serialized data map.
					this->read_value_testListRef ( __data );



					this->__data = __data;
				}

				/**
				 * Serialize this type instance into a data map instance.
				 *
				 * @return - Serialized data record instance.
				 */
				mutable_record_struct *serialize() override
				{
					mutable_record_struct *__data = new mutable_record_struct ( this->record_type );
					CHECK_ALLOC ( __data, TYPE_NAME ( mutable_record_struct ) );
					// Call the method to add the value of key to the serialized data map.
					this->set_serde_key ( __data );

// Call the method to add the value of testLong to the serialized data map.
					this->set_serde_testLong ( __data );

// Call the method to add the value of shortWithDefault to the serialized data map.
					this->set_serde_shortWithDefault ( __data );

// Call the method to add the value of testTypeRef to the serialized data map.
					this->set_serde_testTypeRef ( __data );

// Call the method to add the value of testListRef to the serialized data map.
					this->set_serde_testListRef ( __data );


					return __data;
				}


			};

		}

	}

}

#endif // TEST_SCHEMA_H

