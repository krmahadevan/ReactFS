/*!
 *  Auto-generated types for schema definition [source schema: test_schema]
 *
 *  Reference Schema Version : 0001.0001
 *  Generated by : subho
 *  Generated on : 2016-12-30 11:16:08.503
 */


#ifndef TEST_REF_TYPE_H
#define TEST_REF_TYPE_H
#include "types/includes/type_defs.h"
#include "types/includes/__base_type.h"

#include "test_type.h"


using namespace REACTFS_NS_COMMON_PREFIX;
using namespace REACTFS_NS_CORE_PREFIX::types;



namespace com {
	namespace wookler {
		namespace test {
			/**
			* Generated code for data record type test_ref_type.
			*
			* Note:: Should not be modified as the changes will be lost when the code is re-generated.
			*/
			class test_ref_type  : public com::wookler::reactfs::core::types::__base_type
			{
			private:
				unordered_map<std::string, test_type *> * testRefMap = nullptr;

				char * name = nullptr;



				/**
				* Serialize the type value for test_type and add to the data map.
				*
				* @param __value - Pointer to the field of type test_type.
				* @return - Serialized data map instance.
				*/
				__struct_datatype__ *serialize_test_type ( test_type * __value )
				{
					CHECK_NOT_NULL ( __value );
					__struct_datatype__ *__data = __value->serialize();
					CHECK_NOT_NULL ( __data );
					return __data;
				}

				/**
				 * Deserialize an instance of type test_type from the
				 * passed input data.
				 *
				 * @param __input - Void pointer to input data of type __struct_datatype__
				 * @return - Deserialized instance pointer of type test_type *
				 */
				test_type * deserialize_test_type ( void *__input )
				{
					CHECK_NOT_NULL ( __input );
					__struct_datatype__ *__value = static_cast<__struct_datatype__ *> ( __input );
					CHECK_CAST ( __value, TYPE_NAME ( void * ), TYPE_NAME ( __struct_datatype__ ) );
					test_type * __data = new test_type ( __value );
					CHECK_ALLOC ( __data, TYPE_NAME ( test_type ) );
					return __data;
				}

				/**
				 * Serialize a map instance of key/value type std::string/test_type * from the passed input data.
				 *
				 * @param __i_map - Input map data.
				 * @return - Serialized data map of key/value type unordered_map<std::string, __struct_datatype__ *>
				 */
				std::unordered_map<std::string, __struct_datatype__ *> *serialize_map_unordered_map_std__string__test_type___ ( std::unordered_map<std::string, test_type *> *__i_map )
				{
					CHECK_NOT_EMPTY_P ( __i_map );
					std::unordered_map<std::string, __struct_datatype__ *> *__map = new std::unordered_map<std::string, __struct_datatype__ *>();
					CHECK_ALLOC ( __map, TYPE_NAME ( unordered_map ) );

					std::unordered_map<std::string, test_type *>::iterator iter;
					for ( iter = __i_map->begin(); iter != __i_map->end(); iter++ ) {
						const std::string key = iter->first;
						test_type * value = iter->second;
						CHECK_NOT_NULL ( value );
						__struct_datatype__ *rv = this->serialize_test_type ( value );
						CHECK_NOT_NULL ( rv );
						__map->insert ( {key, rv} );
					}
					return __map;
				}

				/**
				 * Deserialize a map instance of key/value type std::string/test_type * from the passed input data.
				 *
				 * @param __input - Void pointer of type unordered_map<std::string, __struct_datatype__ *>
				 * @return - Deserialized map of key/value type unordered_map<std::string, test_type *>
				 */
				std::unordered_map<std::string, test_type *> *deserialize_map_unordered_map_std__string__test_type___ ( void *__input )
				{
					CHECK_NOT_NULL ( __input );
					std::unordered_map<std::string, __struct_datatype__ *> *__value = static_cast<std::unordered_map<std::string, __struct_datatype__ *> *> ( __input );
					CHECK_CAST ( __value, TYPE_NAME ( void * ), TYPE_NAME ( unordered_map ) );

					std::unordered_map<std::string, test_type *> *__map = new std::unordered_map<std::string, test_type *>();
					CHECK_ALLOC ( __map, TYPE_NAME ( unordered_map ) );

					std::unordered_map<std::string, __struct_datatype__ *>::iterator iter;
					for ( iter = __value->begin(); iter != __value->end(); iter++ ) {
						test_type * __tv = deserialize_test_type ( iter->second );
						CHECK_NOT_NULL ( __tv );
						__map->insert ( {iter->first, __tv} );
					}
					return __map;
				}

				/**
				 * Value testRefMap setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_value_testRefMap ( __struct_datatype__ *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						__struct_datatype__::const_iterator iter = __data->find ( "testRefMap" );
						if ( iter != __data->end() ) {
							void *__ptr = iter->second;
							if ( NOT_NULL ( __ptr ) ) {
								// Set the value of map testRefMap
								std::unordered_map<std::string, test_type *> *__var = deserialize_map_unordered_map_std__string__test_type___ ( __ptr );
								CHECK_NOT_NULL ( __var );
								this->testRefMap = __var;

							} else {
								this->testRefMap = nullptr;
							}
						} else {
							this->testRefMap = nullptr;
						}
					} else {
						this->testRefMap = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of testRefMap from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_map_testRefMap ( __struct_datatype__ *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testRefMap ) ) {
						// Serialize the map testRefMap and add to the data map.
						void *__ptr = serialize_map_unordered_map_std__string__test_type___ ( this->testRefMap );
						CHECK_NOT_NULL ( __ptr );
						__data->insert ( {"testRefMap", __ptr} );

					}
				}

				/**
				 * Value name setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_value_name ( __struct_datatype__ *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						__struct_datatype__::const_iterator iter = __data->find ( "name" );
						if ( iter != __data->end() ) {
							void *__ptr = iter->second;
							if ( NOT_NULL ( __ptr ) ) {
								// Set the value of name
								char * __var = static_cast<char *> ( __ptr );
								CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( char ) );
								this->name = __var;

							} else {
								this->name = nullptr;
							}
						} else {
							this->name = nullptr;
						}
					} else {
						this->name = nullptr;
					}
				}

				/**
				 * Method extracts and set the value of name from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_map_name ( __struct_datatype__ *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->name ) ) {
						// Add the value of name to the data map.
						__data->insert ( {"name", this->name} );

					}
				}


			public:
				/**
				* Get the pointer to the property testRefMap of type unordered_map<std::string, test_type *> *.
				* Returns a const pointer.
				*
				* @return unordered_map<std::string, test_type *> *
				*/
				const unordered_map<std::string, test_type *> * get_testRefMap ( void ) const
				{
					return this->testRefMap;
				}

				/**
				 * Set the pointer to testRefMap.
				 *
				 * @param testRefMap - Pointer of type unordered_map<std::string, test_type *> *.
				 */
				void set_testRefMap ( unordered_map<std::string, test_type *> * testRefMap )
				{
					this->testRefMap = testRefMap;
				}

				/**
				 * Add a key/value pair to the map with a type value.
				 * The value is expected to be a pre-allocated ${type} pointer.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @param m_key - std::string key value.
				 * @param m_value - test_type * value pointer.
				 */
				void add_to_testRefMap ( std::string m_key, test_type * m_value )
				{
					PRECONDITION ( this->__is_allocated == true );
					if ( IS_NULL ( this->testRefMap ) ) {
						this->testRefMap = new std::unordered_map<std::string, test_type *>();
						CHECK_ALLOC ( this->testRefMap, TYPE_NAME ( unordered_map ) );
					}
					this->testRefMap->insert ( {m_key, m_value} );
				}

				/**
				 * Set the pointer to name.
				 *
				 * @param name - Pointer of type char *.
				 */
				void set_name ( char * name )
				{
					this->name = name;
				}

				/**
				 * Get the pointer to the property name of type char *.
				 * Returns a const pointer.
				 *
				 * @return char *
				 */
				const char * get_name ( void ) const
				{
					return this->name;
				}

				/**
				 * Set the char buffer value from the specified string.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @param name - String value to set.
				 */
				void set_name ( string &name )
				{
					FREE_PTR ( this->name );
					if ( !IS_EMPTY ( name ) ) {
						uint32_t __size = name.length() + 1;
						this->name = ( char * ) malloc ( sizeof ( char ) * __size );
						CHECK_ALLOC ( this->name, TYPE_NAME ( char * ) );
						memset ( this->name, 0, __size );
						memcpy ( this->name, name.c_str(), ( __size - 1 ) );
					}
				}

				/**
				 * Empty constructor when creating an instance of test_ref_type for setting data locally.
				 * Should be used to create a new record instance of type test_ref_type.
				 */
				test_ref_type()
				{
					this->__is_allocated = true;
					this->testRefMap = nullptr;
					this->name = nullptr;

				}

				/**
				 * Create a new read-only instance of test_ref_type and populate the data from the passed
				 * serialized data map.
				 *
				 * @param __data - Serialized data map to load the object data from.
				 */
				test_ref_type ( __struct_datatype__ *__data )
				{
					CHECK_NOT_NULL ( __data );
					this->__is_allocated = false;
					this->testRefMap = nullptr;
					this->name = nullptr;

					this->deserialize ( __data );
				}

				/**
				 * Copy constructor to create a copy instance of test_ref_type.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of test_ref_type to copy from.
				 */
				test_ref_type ( const test_ref_type &source )
				{
					this->__is_allocated = true;
					this->testRefMap = nullptr;
					this->name = nullptr;

					// Deserialize the map testRefMap from the source value.
					if ( NOT_EMPTY_P ( source.testRefMap ) ) {
						std::unordered_map<std::string, test_type *> *__map = new std::unordered_map<std::string, test_type *>();
						CHECK_ALLOC ( __map, TYPE_NAME ( unordered_map ) );

						std::unordered_map<std::string, test_type * >::iterator iter;
						for ( iter = source.testRefMap->begin(); iter != source.testRefMap->end(); iter++ ) {
							CHECK_NOT_NULL ( iter->second );
							test_type * __tv = new test_type ( *iter->second );
							CHECK_ALLOC ( __tv, TYPE_NAME ( test_type ) );
							__map->insert ( {iter->first, __tv} );
						}
						this->testRefMap = __map;
					}

// Set name from the source value.
					if ( NOT_NULL ( source.name ) ) {
						string __name = string ( source.name );
						this->set_name ( __name );
					}


				}

				/**
				 * Copy constructor to create a copy instance of test_ref_type.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of test_ref_type to copy from.
				 */
				test_ref_type ( const test_ref_type *source )
				{
					this->__is_allocated = true;
					this->testRefMap = nullptr;
					this->name = nullptr;

					// Deserialize the map testRefMap from the source value.
					if ( NOT_EMPTY_P ( source->testRefMap ) ) {
						std::unordered_map<std::string, test_type *> *__map = new std::unordered_map<std::string, test_type *>();
						CHECK_ALLOC ( __map, TYPE_NAME ( unordered_map ) );

						std::unordered_map<std::string, test_type * >::iterator iter;
						for ( iter = source->testRefMap->begin(); iter != source->testRefMap->end(); iter++ ) {
							CHECK_NOT_NULL ( iter->second );
							test_type * __tv = new test_type ( iter->second );
							CHECK_ALLOC ( __tv, TYPE_NAME ( test_type ) );
							__map->insert ( {iter->first, __tv} );
						}
						this->testRefMap = __map;
					}

// Set name from the source value.
					if ( NOT_NULL ( source->name ) ) {
						string __name = string ( source->name );
						this->set_name ( __name );
					}


				}

				/**
				 * Descructor for test_ref_type
				 */
				~test_ref_type()
				{
					FREE_TYPE_MAP ( this->testRefMap );

					if ( this->__is_allocated ) {
						FREE_PTR ( this->name );
					}


					__base_type::free_data_ptr();
				}

				/**
				 * Free an instance of the serialized data map.
				 *
				 * @param __data - Pointer to the instance of a serialized data map.
				 * @param allocated - Are the value pointers locally allocated and should be freed?
				 */
				void free_data_ptr ( __struct_datatype__ *__data, bool allocated ) override
				{
					if ( NOT_NULL ( __data ) ) {
						__struct_datatype__::iterator iter;
						// Free the map pointer and the list values, if locally allocated.
						iter = __data->find ( "testRefMap" );
						if ( iter != __data->end() ) {
							if ( NOT_NULL ( iter->second ) ) {
								void *__ptr = iter->second;
								std::unordered_map<std::string, test_type *> *__m_ptr = static_cast<std::unordered_map<std::string, test_type *> *> ( __ptr );
								CHECK_CAST ( __m_ptr, TYPE_NAME ( void ), TYPE_NAME ( unordered_map ) );
								if ( allocated ) {
									FREE_NATIVE_MAP ( __m_ptr );
								} else {
									CHECK_AND_FREE ( __m_ptr );
								}
							}
						}

// Free the name value if locally allocated
						iter = __data->find ( "name" );
						if ( iter != __data->end() ) {
							if ( NOT_NULL ( iter->second ) ) {
								void *__ptr = iter->second;
								if ( allocated ) {
									FREE_PTR ( __ptr );
								}
							}
						}


						__data->clear();
						CHECK_AND_FREE ( __data );
					}
				}

				/**
				 * Deserialize this type instance from the passed data map.
				 *
				 * @param __data - Serialized data map instance to load this type from.
				 */
				void deserialize ( __struct_datatype__ *__data ) override
				{
					CHECK_NOT_NULL ( __data );
					// Set the value of testRefMap from the serialized data map.
					this->set_value_testRefMap ( __data );

					// Set the value of name from the serialized data map.
					this->set_value_name ( __data );


					this->__data = __data;
				}

				/**
				 * Serialize this type instance into a data map instance.
				 *
				 * @return - Serialized data map instance.
				 */
				__struct_datatype__ *serialize() override
				{
					__struct_datatype__ *__data = new __struct_datatype__();
					CHECK_ALLOC ( __data, TYPE_NAME ( __struct_datatype__ ) );
					// Call the method to add the value of testRefMap to the serialized data map.
					this->set_map_testRefMap ( __data );

// Call the method to add the value of name to the serialized data map.
					this->set_map_name ( __data );


					return __data;
				}


			};

		}

	}

}

#endif // TEST_REF_TYPE_H

